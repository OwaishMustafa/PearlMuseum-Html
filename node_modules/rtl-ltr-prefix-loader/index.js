var loaderUtils = require("loader-utils");

module.exports = function processCss(source) {
    
    var query = loaderUtils.getOptions(this) || {};
    var output = [] ;

    ////////////
    // format node that contains rtl , ltr string
    //////

    

    source.split("\n").forEach(function(l) {
       l = JSON.stringify(l);
       
       // Remove LTR Styles
       
       if(query.dir == 'rtl'){
            if (match = JSON.parse(l).match(/^\s*-rtl-(.*)$/)) {
                
                output.push(match[1]);
            }
            else if (match = JSON.parse(l).match(/^\s*-ltr-(.*)$/)) {
                
                // Check if end of line exists before removing
                if (match2 = JSON.parse(l).match(/^\s*(.*)\}$/))
                {
                    output.push("}");
                }
            }
            else{
                
                output.push(JSON.parse(l));
            }
       }
       // Remove RTL styles
       else if (query.dir == 'ltr'){
            if (match = JSON.parse(l).match(/^\s*-rtl-(.*)$/)) {
                if (match2 = JSON.parse(l).match(/^\s*(.*)\}$/))
                {
                    output.push("}");
                }
            }
            else if (match = JSON.parse(l).match(/^\s*-ltr-(.*)$/)) {
                output.push(match[1]);
            }
            else{
                output.push(JSON.parse(l));
            }
       }
       // Remove All
       else{
            if (match = JSON.parse(l).match(/^\s*-rtl-(.*)$/)) {
                if (match2 = JSON.parse(l).match(/^\s*(.*)\}$/))
                {
                    output.push("}");
                }
            }
            else if (match = JSON.parse(l).match(/^\s*-ltr-(.*)$/)) {
                if (match2 = JSON.parse(l).match(/^\s*(.*)\}$/))
                {
                    output.push("}");
                }
            }
            else{
                output.push(JSON.parse(l));
            }
       }
        
    }, this);
    
    return output.join('\n');
    
};
